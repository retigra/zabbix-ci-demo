zabbix_export:
  version: '7.2'
  template_groups:
  - uuid: c2c162144c2d4c5491c8801193af4945
    name: Templates/Cloud
  templates:
  - uuid: 178645e229484bcf9cb030dc1edccebb
    template: Oracle Cloud Autonomous Database by HTTP
    name: Oracle Cloud Autonomous Database by HTTP
    description: |
      This template monitors Oracle Cloud Infrastructure (OCI) autonomous database (serverless) resources.

      This template is not meant to be used independently, but together with Oracle Cloud by HTTP as a template for
      LLD host prototypes.

      Read the template documentation prior to using this template.

      You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback

      Generated by official Zabbix template tool "Templator"
    vendor:
      name: Zabbix
      version: 7.2-1
    groups:
    - name: Templates/Cloud
    items:
    - uuid: 8520813edccc4fb9ba975c27914c5633
      name: Database availability
      type: DEPENDENT
      key: oci.aut.db.availability
      value_type: FLOAT
      description: The database is available for connections in the given minute.
      valuemap:
        name: Database availability
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.DatabaseAvailability
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 5h
      master_item:
        key: oci.aut.db.metrics.stats
      tags:
      - tag: component
        value: environment
      triggers:
      - uuid: 21b1a5c7d7754eb6be30098b2df99a22
        expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.availability)
          = 0
        name: 'OCI Autonomous DB: Database is not available'
        priority: HIGH
        description: Autonomous database is not available.
        dependencies:
        - name: 'OCI Autonomous DB: Database is not available or accessible'
          expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
            = 19 or last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
            = 20
        tags:
        - tag: scope
          value: availability
    - uuid: 038c4b2c000747799b60cb074aebbce5
      name: DB block changes
      type: DEPENDENT
      key: oci.aut.db.block.changes
      description: |
        The number of changes that were part of an update or delete operation that were made to all blocks in the SGA.
        Such changes generate redo log entries and thus become permanent changes to the database if the transaction is committed.
        This statistic approximates total database work and indicates the rate at which buffers are being dirtied during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.DBBlockChanges
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: a471a74943b24a4a81347404e37b7359
      name: Failed connections
      type: DEPENDENT
      key: oci.aut.db.conn.failed
      description: The number of failed database connections.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.FailedConnections
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: cc1244e911314e9aaa6a995636848809
      name: CPU time
      type: DEPENDENT
      key: oci.aut.db.cpu.time
      value_type: FLOAT
      description: Average rate of accumulation of CPU time by foreground sessions
        in the database over the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.CpuTime
      - type: JAVASCRIPT
        parameters:
        - return Math.round(value * 100) / 100;
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: cpu
    - uuid: da165d0adf324b9e98390d122925fd67
      name: CPU utilization, in %
      type: DEPENDENT
      key: oci.aut.db.cpu.util
      value_type: FLOAT
      units: '%'
      description: The CPU usage expressed as a percentage, aggregated across all
        consumer groups. The utilization percentage is reported with respect to the
        number of CPUs the database is allowed to use.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.CpuUtilization
      - type: JAVASCRIPT
        parameters:
        - return Math.round(value * 100) / 100;
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: cpu
      triggers:
      - uuid: 59fd2d0eff9f4f5493cd0de94ba57572
        expression: min(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.cpu.util,5m)
          >= {$OCI.AUTONOMOUS.DB.CPU.UTIL.WARN}
        name: 'OCI Autonomous DB: Current CPU utilization is high'
        event_name: 'OCI Autonomous DB: Current CPU utilization is high (util >= {$OCI.AUTONOMOUS.DB.CPU.UTIL.WARN}%)'
        opdata: 'Current: {ITEM.LASTVALUE1}'
        priority: WARNING
        description: Current CPU utilization has exceeded `{$OCI.AUTONOMOUS.DB.CPU.UTIL.WARN}`%
          of the max available value.
        dependencies:
        - name: 'OCI Autonomous DB: Current CPU utilization is too high'
          expression: min(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.cpu.util,5m)
            >= {$OCI.AUTONOMOUS.DB.CPU.UTIL.HIGH}
        tags:
        - tag: scope
          value: capacity
      - uuid: f8a53ef11d2140649bc701660183c33d
        expression: min(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.cpu.util,5m)
          >= {$OCI.AUTONOMOUS.DB.CPU.UTIL.HIGH}
        name: 'OCI Autonomous DB: Current CPU utilization is too high'
        event_name: 'OCI Autonomous DB: Current CPU utilization is too high (util
          >= {$OCI.AUTONOMOUS.DB.CPU.UTIL.HIGH}%)'
        opdata: 'Current: {ITEM.LASTVALUE1}'
        priority: HIGH
        description: Current CPU utilization has exceeded `{$OCI.AUTONOMOUS.DB.CPU.UTIL.HIGH}`%
          of the max available value.
        tags:
        - tag: scope
          value: capacity
    - uuid: 47708f3446644bbc9afd11bd0e98d1f5
      name: Execute count
      type: DEPENDENT
      key: oci.aut.db.exec.count
      description: The number of user and recursive calls that executed SQL statements
        during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.ExecuteCount
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 4a1af0cbea8645cc897d64e3c1ac802e
      name: Connection latency
      type: DEPENDENT
      key: oci.aut.db.latency.conn
      value_type: FLOAT
      units: s
      description: The time taken to connect to an Oracle Autonomous Database Serverless
        instance in each region from a Compute service virtual machine in the same
        region.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.ConnectionLatency
      - type: MULTIPLIER
        parameters:
        - '0.001'
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 5h
      master_item:
        key: oci.aut.db.metrics.stats
      tags:
      - tag: component
        value: environment
    - uuid: e233b1ab82384297b9ee88556969da31
      name: Query latency
      type: DEPENDENT
      key: oci.aut.db.latency.query
      value_type: FLOAT
      units: s
      description: The time taken to display the results of a simple query on the
        user's screen.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.QueryLatency
      - type: MULTIPLIER
        parameters:
        - '0.001'
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 5h
      master_item:
        key: oci.aut.db.metrics.stats
      tags:
      - tag: component
        value: environment
    - uuid: b39b36b4a72b4cbf80584614c3d996ed
      name: Session logical reads
      type: DEPENDENT
      key: oci.aut.db.logical.reads.session
      description: The sum of `db block gets` and `consistent gets` during the selected
        time interval. This includes logical reads of database blocks from either
        the buffer cache or process private memory.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.LogicalReads
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 27b77344e5fc473693e48eb676ceb746
      name: Current logons
      type: DEPENDENT
      key: oci.aut.db.logons
      description: The number of successful logons during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.CurrentLogons
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: f4c0af10cea04decbb049c02f06795e4
      name: Failed logons
      type: DEPENDENT
      key: oci.aut.db.logons.failed
      value_type: FLOAT
      description: The number of logons that failed because of an invalid user name
        and/or password during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.FailedLogons
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 6104537179324cb48d82e05d64f3a19f
      name: Get frequent metrics
      type: SCRIPT
      key: oci.aut.db.metrics.frequent.get
      history: '0'
      value_type: TEXT
      params: |
        function validateZabbixParams(requiredParams, allParams) {
        	requiredParams.forEach(function (field) {
        		if (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {
        			throw 'Required param is not set: ' + field + '.';
        		}
        	});
        }

        function OCI(service, action, params) {
        	this.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';
        	this.request = new HttpRequest();

        	this.hash = function (string) {
        		return sha256(string);
        	};

        	this.sign = function (string) {
        		return sign('sha256', params['private_key'], string);
        	};

        	this.encode = function (hash) {
        		const hexArr = hash.match(/.{1,2}/g);
        		var uInt8Array = new Uint8Array(hexArr.length);
        		hexArr.forEach(function (hex, idx) {
        			uInt8Array[idx] = parseInt(hex, 16);
        		});
        		return btoa(uInt8Array);
        	};

        	this.getDate = function () {
        		const weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        		const monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
        		const today = new Date();
        		return weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';
        	};

        	this.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {
        		var headers = '(request-target) date host';
        		const contentTypeHeader = 'content-type: application/json';
        		const dateHeader = 'date: ' + this.getDate();
        		const hostHeader = 'host: ' + params['api_host'];
        		const requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;
        		var signingString = requestTarget + '\n' + dateHeader + '\n' + hostHeader;
        		var reqHeaders = [contentTypeHeader, dateHeader];

        		if (httpMethod === 'post') {
        			var body = JSON.stringify({
        				'namespace': namespace,
        				'query': mql
        			});
        			headers = headers + ' x-content-sha256 content-type content-length';
        			const bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));
        			const bodyLengthHeader = 'content-length: ' + body.length;
        			signingString = signingString + '\n' + bodyHeader + '\n' + contentTypeHeader + '\n' + bodyLengthHeader;
        			reqHeaders.push(bodyHeader, bodyLengthHeader);
        		}

        		const signature = this.encode(this.sign(signingString));

        		reqHeaders.push('Authorization: Signature version="1",keyId="' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '",algorithm="rsa-sha256",headers="' + headers + '",signature="' + signature + '"');
        		for (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {
        			this.request.addHeader(reqHeaders[header]);
        		}

        		if (params['http_proxy']) {
        			this.request.setProxy(params['http_proxy']);
        			Zabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);
        		}

        		if (httpMethod === 'post') {
        			var apiRateLimitExceeded = false;
        			do {
        				const response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);

        				try {
        					if (JSON.parse(response)['code'] === 'TooManyRequests') {

        						apiRateLimitExceeded = true;
        						Zabbix.sleep(1000);
        					} else {
        						apiRateLimitExceeded = false;
        					}
        				} catch (error) {
        					Zabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));
        					throw 'Could not parse the response. See logs for more information.';
        				}
        			} while (apiRateLimitExceeded);
        		} else {
        			const response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);
        		}

        		this.request.clearHeader();

        		if (this.request.getStatus() === parseInt(params['http_status_code'])) {
        			return response;
        		} else {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());
        			throw 'Unexpected HTTP response code: ' + this.request.getStatus();
        		}
        	};

        	this.extractData = function (httpMethod, data, keys, compartment) {
        		try {
        			data = JSON.parse(data);
        		} catch (error) {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);
        			throw 'Could not parse received JSON object. See logs for more information.';
        		}

        		if (typeof keys == 'object') {
        			var returnBuffer = [];
        			for (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {

        				var objectBuffer = {};
        				for (var key = 0, keysLength = keys.length; key < keysLength; key++) {
        					if (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {
        						objectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];
        					} else {
        						Zabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key "' + keys[key] + '" in JSON: ' + JSON.stringify(data[dataObj]));
        						throw 'Received an unexpected JSON object. See logs for more information.';
        					}
        				}
        				if (typeof compartment != 'undefined' && compartment != '') objectBuffer['compartment'] = compartment;
        				returnBuffer.push(objectBuffer);
        			}
        			return returnBuffer;
        		}

        		try {
        			if (httpMethod === 'get') {
        				return data[keys];
        			} else {
        				if (data.length === 0) {
        					return 0;
        				}
        				data = data[0][keys];
        				return data[data.length - 1]['value'];
        			}
        		} catch (error) {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Could not find key "' + keys + '" in JSON: ' + JSON.stringify(data));
        			throw 'Could not find required key in JSON object. See logs for more information.';
        		}
        	};
        }

        function buildMql(id, metrics, defaultStatistic, resourceType) {
        	resourceType = resourceType === '' || resourceType === undefined ? 'resourceId' : resourceType;
        	this.query = '[' + params['req_interval'] + 'm]{' + resourceType + '=' + id + '}.';

        	for (var i = 0, metricsLength = metrics.length; i < metricsLength; i++) {
        		const metric = ((Array.isArray(metrics[i]) ? metrics[i] : [metrics[i], defaultStatistic]));
        		metrics[i] = [metric[0], this.query + metric[1]];
        	}
        }


        const params = JSON.parse(value);
        validateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'db_id', 'http_status_code', 'req_interval', 'compartment_id'], params);
        var oci = new OCI('Autonomous DB', 'Get metrics ' + params['req_interval'] + 'm', params);

        const metrics = [
        	['CpuTime', 'mean'],
        	['CpuUtilization', 'mean'],
        	['CurrentLogons', 'count'],
        	'DBBlockChanges',
        	['DBTime', 'mean'],
        	'ExecuteCount',
        	'FailedConnections',
        	['FailedLogons', 'mean'],
        	'HardParseCount',
        	'LogicalReads',
        	'ParseCount',
        	'ParseFailureCount',
        	'PhysicalReads',
        	'PhysicalReadTotalBytes',
        	'PhysicalWrites',
        	'PhysicalWriteTotalBytes',
        	'QueuedStatements',
        	'RedoGenerated',
        	['RunningStatements', 'mean'],
        	'Sessions',
        	'SQLNetBytesFromClient',
        	'SQLNetBytesFromDBLink',
        	'SQLNetBytesToClient',
        	'SQLNetBytesToDBLink',
        	'TransactionCount',
        	'UserCalls',
        	'UserCommits',
        	'UserRollbacks',
        	['WaitTime', 'mean']
        ];
        buildMql(params['db_id'], metrics, 'sum');

        var result = {};
        for (var i = 0, metricsLength = metrics.length; i < metricsLength; i++) {
        	result[metrics[i][0]] = oci.extractData('post', oci.executeRequest('post', '/20180401/metrics/actions/summarizeMetricsData', '?compartmentId=' + encodeURIComponent(params['compartment_id']), metrics[i][0] + metrics[i][1] + '()', 'oci_autonomous_database'), 'aggregatedDatapoints');
        }
        return JSON.stringify(result);
      description: Gets all metrics related to the database that have a collection
        frequency of 1 minute.
      timeout: 30s
      parameters:
      - name: api_host
        value: '{$OCI.API.TELEMETRY.HOST}'
      - name: compartment_id
        value: '{$OCI.AUTONOMOUS.DB.COMPARTMENT.ID}'
      - name: db_id
        value: '{$OCI.AUTONOMOUS.DB.ID}'
      - name: fingerprint
        value: '{$OCI.API.FINGERPRINT}'
      - name: http_proxy
        value: '{$OCI.HTTP.PROXY}'
      - name: http_status_code
        value: '{$OCI.HTTP.RETURN.CODE.OK}'
      - name: private_key
        value: '{$OCI.API.PRIVATE.KEY}'
      - name: req_interval
        value: '1'
      - name: tenancy_ocid
        value: '{$OCI.API.TENANCY}'
      - name: user_ocid
        value: '{$OCI.API.USER}'
      tags:
      - tag: component
        value: raw
    - uuid: 87a25240776a4b8a9a17ac053b69fd99
      name: Get database stats
      type: SCRIPT
      key: oci.aut.db.metrics.stats
      delay: 5m
      history: '0'
      value_type: TEXT
      params: |
        function validateZabbixParams(requiredParams, allParams) {
        	requiredParams.forEach(function (field) {
        		if (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {
        			throw 'Required param is not set: ' + field + '.';
        		}
        	});
        }

        function OCI(service, action, params) {
        	this.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';
        	this.request = new HttpRequest();

        	this.hash = function (string) {
        		return sha256(string);
        	};

        	this.sign = function (string) {
        		return sign('sha256', params['private_key'], string);
        	};

        	this.encode = function (hash) {
        		const hexArr = hash.match(/.{1,2}/g);
        		var uInt8Array = new Uint8Array(hexArr.length);
        		hexArr.forEach(function (hex, idx) {
        			uInt8Array[idx] = parseInt(hex, 16);
        		});
        		return btoa(uInt8Array);
        	};

        	this.getDate = function () {
        		const weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        		const monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
        		const today = new Date();
        		return weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';
        	};

        	this.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {
        		var headers = '(request-target) date host';
        		const contentTypeHeader = 'content-type: application/json';
        		const dateHeader = 'date: ' + this.getDate();
        		const hostHeader = 'host: ' + params['api_host'];
        		const requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;
        		var signingString = requestTarget + '\n' + dateHeader + '\n' + hostHeader;
        		var reqHeaders = [contentTypeHeader, dateHeader];

        		if (httpMethod === 'post') {
        			var body = JSON.stringify({
        				'namespace': namespace,
        				'query': mql
        			});
        			headers = headers + ' x-content-sha256 content-type content-length';
        			const bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));
        			const bodyLengthHeader = 'content-length: ' + body.length;
        			signingString = signingString + '\n' + bodyHeader + '\n' + contentTypeHeader + '\n' + bodyLengthHeader;
        			reqHeaders.push(bodyHeader, bodyLengthHeader);
        		}

        		const signature = this.encode(this.sign(signingString));

        		reqHeaders.push('Authorization: Signature version="1",keyId="' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '",algorithm="rsa-sha256",headers="' + headers + '",signature="' + signature + '"');
        		for (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {
        			this.request.addHeader(reqHeaders[header]);
        		}

        		if (params['http_proxy']) {
        			this.request.setProxy(params['http_proxy']);
        			Zabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);
        		}

        		if (httpMethod === 'post') {
        			var apiRateLimitExceeded = false;
        			do {
        				const response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);

        				try {
        					if (JSON.parse(response)['code'] === 'TooManyRequests') {

        						apiRateLimitExceeded = true;
        						Zabbix.sleep(1000);
        					} else {
        						apiRateLimitExceeded = false;
        					}
        				} catch (error) {
        					Zabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));
        					throw 'Could not parse the response. See logs for more information.';
        				}
        			} while (apiRateLimitExceeded);
        		} else {
        			const response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);
        		}

        		this.request.clearHeader();

        		if (this.request.getStatus() === parseInt(params['http_status_code'])) {
        			return response;
        		} else {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());
        			throw 'Unexpected HTTP response code: ' + this.request.getStatus();
        		}
        	};

        	this.extractData = function (httpMethod, data, keys, compartment) {
        		try {
        			data = JSON.parse(data);
        		} catch (error) {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);
        			throw 'Could not parse received JSON object. See logs for more information.';
        		}

        		if (typeof keys == 'object') {
        			var returnBuffer = [];
        			for (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {

        				var objectBuffer = {};
        				for (var key = 0, keysLength = keys.length; key < keysLength; key++) {
        					if (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {
        						objectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];
        					} else {
        						Zabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key "' + keys[key] + '" in JSON: ' + JSON.stringify(data[dataObj]));
        						throw 'Received an unexpected JSON object. See logs for more information.';
        					}
        				}
        				if (typeof compartment != 'undefined' && compartment != '') objectBuffer['compartment'] = compartment;
        				returnBuffer.push(objectBuffer);
        			}
        			return returnBuffer;
        		}

        		try {
        			if (httpMethod === 'get') {
        				return data[keys];
        			} else {
        				if (data.length === 0) {
        					return 0;
        				}
        				data = data[0][keys];
        				return data[data.length - 1]['value'];
        			}
        		} catch (error) {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Could not find key "' + keys + '" in JSON: ' + JSON.stringify(data));
        			throw 'Could not find required key in JSON object. See logs for more information.';
        		}
        	};
        }

        function buildMql(id, metrics, defaultStatistic, resourceType) {
        	resourceType = resourceType === '' || resourceType === undefined ? 'resourceId' : resourceType;
        	this.query = '[' + params['req_interval'] + 'm]{' + resourceType + '=' + id + '}.';

        	for (var i = 0, metricsLength = metrics.length; i < metricsLength; i++) {
        		const metric = ((Array.isArray(metrics[i]) ? metrics[i] : [metrics[i], defaultStatistic]));
        		metrics[i] = [metric[0], this.query + metric[1]];
        	}
        }


        const params = JSON.parse(value);
        validateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'db_id', 'http_status_code', 'req_interval', 'compartment_id'], params);
        var oci = new OCI('Autonomous DB', 'Get metrics ' + params['req_interval'] + 'm', params);

        const metrics = [
        	['DatabaseAvailability', 'last'],
        	'ConnectionLatency',
        	'QueryLatency'
        ];
        buildMql(params['db_id'], metrics, 'max');

        var result = {};
        for (var i = 0, metricsLength = metrics.length; i < metricsLength; i++) {
        	result[metrics[i][0]] = oci.extractData('post', oci.executeRequest('post', '/20180401/metrics/actions/summarizeMetricsData', '?compartmentId=' + encodeURIComponent(params['compartment_id']), metrics[i][0] + metrics[i][1] + '()', 'oci_autonomous_database'), 'aggregatedDatapoints');
        }
        return JSON.stringify(result);
      description: Gets all metrics related to specific database that have a collection
        frequency of 5 minutes.
      timeout: 30s
      parameters:
      - name: api_host
        value: '{$OCI.API.TELEMETRY.HOST}'
      - name: compartment_id
        value: '{$OCI.AUTONOMOUS.DB.COMPARTMENT.ID}'
      - name: db_id
        value: '{$OCI.AUTONOMOUS.DB.ID}'
      - name: fingerprint
        value: '{$OCI.API.FINGERPRINT}'
      - name: http_proxy
        value: '{$OCI.HTTP.PROXY}'
      - name: http_status_code
        value: '{$OCI.HTTP.RETURN.CODE.OK}'
      - name: private_key
        value: '{$OCI.API.PRIVATE.KEY}'
      - name: req_interval
        value: '5'
      - name: tenancy_ocid
        value: '{$OCI.API.TENANCY}'
      - name: user_ocid
        value: '{$OCI.API.USER}'
      tags:
      - tag: component
        value: raw
    - uuid: cb2936c594e4450096559b3023f6aa4f
      name: Get storage stats
      type: SCRIPT
      key: oci.aut.db.metrics.storage.stats
      delay: 60m
      history: '0'
      value_type: TEXT
      params: |
        function validateZabbixParams(requiredParams, allParams) {
        	requiredParams.forEach(function (field) {
        		if (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {
        			throw 'Required param is not set: ' + field + '.';
        		}
        	});
        }

        function OCI(service, action, params) {
        	this.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';
        	this.request = new HttpRequest();

        	this.hash = function (string) {
        		return sha256(string);
        	};

        	this.sign = function (string) {
        		return sign('sha256', params['private_key'], string);
        	};

        	this.encode = function (hash) {
        		const hexArr = hash.match(/.{1,2}/g);
        		var uInt8Array = new Uint8Array(hexArr.length);
        		hexArr.forEach(function (hex, idx) {
        			uInt8Array[idx] = parseInt(hex, 16);
        		});
        		return btoa(uInt8Array);
        	};

        	this.getDate = function () {
        		const weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        		const monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
        		const today = new Date();
        		return weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';
        	};

        	this.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {
        		var headers = '(request-target) date host';
        		const contentTypeHeader = 'content-type: application/json';
        		const dateHeader = 'date: ' + this.getDate();
        		const hostHeader = 'host: ' + params['api_host'];
        		const requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;
        		var signingString = requestTarget + '\n' + dateHeader + '\n' + hostHeader;
        		var reqHeaders = [contentTypeHeader, dateHeader];

        		if (httpMethod === 'post') {
        			var body = JSON.stringify({
        				'namespace': namespace,
        				'query': mql
        			});
        			headers = headers + ' x-content-sha256 content-type content-length';
        			const bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));
        			const bodyLengthHeader = 'content-length: ' + body.length;
        			signingString = signingString + '\n' + bodyHeader + '\n' + contentTypeHeader + '\n' + bodyLengthHeader;
        			reqHeaders.push(bodyHeader, bodyLengthHeader);
        		}

        		const signature = this.encode(this.sign(signingString));

        		reqHeaders.push('Authorization: Signature version="1",keyId="' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '",algorithm="rsa-sha256",headers="' + headers + '",signature="' + signature + '"');
        		for (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {
        			this.request.addHeader(reqHeaders[header]);
        		}

        		if (params['http_proxy']) {
        			this.request.setProxy(params['http_proxy']);
        			Zabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);
        		}

        		if (httpMethod === 'post') {
        			var apiRateLimitExceeded = false;
        			do {
        				const response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);

        				try {
        					if (JSON.parse(response)['code'] === 'TooManyRequests') {

        						apiRateLimitExceeded = true;
        						Zabbix.sleep(1000);
        					} else {
        						apiRateLimitExceeded = false;
        					}
        				} catch (error) {
        					Zabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));
        					throw 'Could not parse the response. See logs for more information.';
        				}
        			} while (apiRateLimitExceeded);
        		} else {
        			const response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);
        		}

        		this.request.clearHeader();

        		if (this.request.getStatus() === parseInt(params['http_status_code'])) {
        			return response;
        		} else {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());
        			throw 'Unexpected HTTP response code: ' + this.request.getStatus();
        		}
        	};

        	this.extractData = function (httpMethod, data, keys, compartment) {
        		try {
        			data = JSON.parse(data);
        		} catch (error) {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);
        			throw 'Could not parse received JSON object. See logs for more information.';
        		}

        		if (typeof keys == 'object') {
        			var returnBuffer = [];
        			for (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {

        				var objectBuffer = {};
        				for (var key = 0, keysLength = keys.length; key < keysLength; key++) {
        					if (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {
        						objectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];
        					} else {
        						Zabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key "' + keys[key] + '" in JSON: ' + JSON.stringify(data[dataObj]));
        						throw 'Received an unexpected JSON object. See logs for more information.';
        					}
        				}
        				if (typeof compartment != 'undefined' && compartment != '') objectBuffer['compartment'] = compartment;
        				returnBuffer.push(objectBuffer);
        			}
        			return returnBuffer;
        		}

        		try {
        			if (httpMethod === 'get') {
        				return data[keys];
        			} else {
        				if (data.length === 0) {
        					return 0;
        				}
        				data = data[0][keys];
        				return data[data.length - 1]['value'];
        			}
        		} catch (error) {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Could not find key "' + keys + '" in JSON: ' + JSON.stringify(data));
        			throw 'Could not find required key in JSON object. See logs for more information.';
        		}
        	};
        }

        function buildMql(id, metrics, defaultStatistic, resourceType) {
        	resourceType = resourceType === '' || resourceType === undefined ? 'resourceId' : resourceType;
        	this.query = '[' + params['req_interval'] + 'm]{' + resourceType + '=' + id + '}.';

        	for (var i = 0, metricsLength = metrics.length; i < metricsLength; i++) {
        		const metric = ((Array.isArray(metrics[i]) ? metrics[i] : [metrics[i], defaultStatistic]));
        		metrics[i] = [metric[0], this.query + metric[1]];
        	}
        }


        const params = JSON.parse(value);
        validateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'db_id', 'http_status_code', 'req_interval', 'compartment_id'], params);
        var oci = new OCI('Autonomous DB', 'Get metrics ' + params['req_interval'] + 'm', params);

        const metrics = [
        	'StorageAllocated',
        	'StorageMax',
        	'StorageUsed',
        	['StorageUtilization', 'mean']
        ];
        buildMql(params['db_id'], metrics, 'max');

        var result = {};
        for (var i = 0, metricsLength = metrics.length; i < metricsLength; i++) {
        	result[metrics[i][0]] = oci.extractData('post', oci.executeRequest('post', '/20180401/metrics/actions/summarizeMetricsData', '?compartmentId=' + encodeURIComponent(params['compartment_id']), metrics[i][0] + metrics[i][1] + '()', 'oci_autonomous_database'), 'aggregatedDatapoints');
        }
        return JSON.stringify(result);
      description: Gets all storage metrics related to a specific database that have
        a collection frequency of 60 minutes.
      timeout: 30s
      parameters:
      - name: api_host
        value: '{$OCI.API.TELEMETRY.HOST}'
      - name: compartment_id
        value: '{$OCI.AUTONOMOUS.DB.COMPARTMENT.ID}'
      - name: db_id
        value: '{$OCI.AUTONOMOUS.DB.ID}'
      - name: fingerprint
        value: '{$OCI.API.FINGERPRINT}'
      - name: http_proxy
        value: '{$OCI.HTTP.PROXY}'
      - name: http_status_code
        value: '{$OCI.HTTP.RETURN.CODE.OK}'
      - name: private_key
        value: '{$OCI.API.PRIVATE.KEY}'
      - name: req_interval
        value: '60'
      - name: tenancy_ocid
        value: '{$OCI.API.TENANCY}'
      - name: user_ocid
        value: '{$OCI.API.USER}'
      tags:
      - tag: component
        value: raw
    - uuid: 8ca09dafd8a744489ac122d995367a76
      name: Parse count (failures)
      type: DEPENDENT
      key: oci.aut.db.parse.count.failed
      description: The number of parse failures during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.ParseFailureCount
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 0f052e0dd75d4ae190c3b87581e29136
      name: Parse count (hard)
      type: DEPENDENT
      key: oci.aut.db.parse.count.hard
      description: The number of parse calls (real parses) during the selected time
        interval. A hard parse is an expensive operation in terms of memory use as
        it requires Oracle to allocate a workheap and other memory structures and
        then build a parse tree.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.HardParseCount
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: d5097f4c85ee40608ca8096f1d5f81c1
      name: Parse count (total)
      type: DEPENDENT
      key: oci.aut.db.parse.count.total
      description: The number of hard and soft parses during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.ParseCount
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: db1b10f32442428b89a0437176b94906
      name: Physical read total bytes
      type: DEPENDENT
      key: oci.aut.db.physical.read.bytes
      units: B
      description: The size in bytes of disk reads by all database instance activity
        including application reads, backup and recovery, and other utilities during
        the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.PhysicalReadTotalBytes
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: a0e9f2b67c364a8baecc611ff1637399
      name: Physical reads
      type: DEPENDENT
      key: oci.aut.db.physical.reads
      description: The number of data blocks read from disk during the selected time
        interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.PhysicalReads
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 81f85ed2baa44bb3a0b05255cc866c3e
      name: Physical write total bytes
      type: DEPENDENT
      key: oci.aut.db.physical.write.bytes
      units: B
      description: The size in bytes of all disk writes for the database instance
        including application activity, backup and recovery, and other utilities during
        the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.PhysicalWriteTotalBytes
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 2b9998f8dd7d493496146d10fff0a5ee
      name: Physical writes
      type: DEPENDENT
      key: oci.aut.db.physical.writes
      description: The number of data blocks written to disk during the selected time
        interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.PhysicalWrites
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 2acac07f1c30472a84b8864a6cfa7985
      name: Queued statements
      type: DEPENDENT
      key: oci.aut.db.queued.statements
      description: The number of queued SQL statements aggregated across all consumer
        groups during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.QueuedStatements
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 0f79764cca3f45688d79bb79c762ef99
      name: Redo generated
      type: DEPENDENT
      key: oci.aut.db.redo.gen
      description: Amount of redo generated in bytes during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.RedoGenerated
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 11ca43167a374fe99eab91817957a3fb
      name: Sessions
      type: DEPENDENT
      key: oci.aut.db.sessions
      description: The number of sessions in the database.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.Sessions
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: a71a6114736f4ce89425ed8de504140d
      name: Bytes received via SQL*Net from client
      type: DEPENDENT
      key: oci.aut.db.sqlnet.bytes.recv.client
      units: B
      description: The number of bytes received from the client over Oracle Net Services
        during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.SQLNetBytesFromClient
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: a1555ae851e1432c94169e430a782c7d
      name: Bytes received via SQL*Net from DBLink
      type: DEPENDENT
      key: oci.aut.db.sqlnet.bytes.recv.dblink
      units: B
      description: The number of bytes received from a database link over Oracle Net
        Services during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.SQLNetBytesFromDBLink
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 35cdcf2b736745708910f2389a64670d
      name: Bytes sent via SQL*Net to client
      type: DEPENDENT
      key: oci.aut.db.sqlnet.bytes.sent.client
      units: B
      description: The number of bytes sent to the client from the foreground processes
        during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.SQLNetBytesToClient
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 5cc3975e76a842b89a7c6d2ac5108b8c
      name: Bytes sent via SQL*Net to DBLink
      type: DEPENDENT
      key: oci.aut.db.sqlnet.bytes.sent.dblink
      units: B
      description: The number of bytes sent over a database link during the selected
        time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.SQLNetBytesToDBLink
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 48d69be6970c41fcb110f18e18ff6387
      name: State
      type: SCRIPT
      key: oci.aut.db.state
      params: |
        function validateZabbixParams(requiredParams, allParams) {
        	requiredParams.forEach(function (field) {
        		if (typeof allParams !== 'object' || typeof allParams[field] === 'undefined' || allParams[field] === '') {
        			throw 'Required param is not set: ' + field + '.';
        		}
        	});
        }

        function OCI(service, action, params) {
        	this.zabbixLogPrefix = '[ OCI ] [ ' + service + ' ] [ ' + action + ' ]';
        	this.request = new HttpRequest();

        	this.hash = function (string) {
        		return sha256(string);
        	};

        	this.sign = function (string) {
        		return sign('sha256', params['private_key'], string);
        	};

        	this.encode = function (hash) {
        		const hexArr = hash.match(/.{1,2}/g);
        		var uInt8Array = new Uint8Array(hexArr.length);
        		hexArr.forEach(function (hex, idx) {
        			uInt8Array[idx] = parseInt(hex, 16);
        		});
        		return btoa(uInt8Array);
        	};

        	this.getDate = function () {
        		const weekdayShortList = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        		const monthShortList = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
        		const today = new Date();
        		return weekdayShortList[today.getUTCDay()] + ', ' + today.getUTCDate() + ' ' + monthShortList[today.getUTCMonth()] + ' ' + today.getUTCFullYear() + ' ' + today.getUTCHours() + ':' + today.getUTCMinutes() + ':' + today.getUTCSeconds() + ' GMT';
        	};

        	this.executeRequest = function (httpMethod, apiPath, apiParams, mql, namespace) {
        		var headers = '(request-target) date host';
        		const contentTypeHeader = 'content-type: application/json';
        		const dateHeader = 'date: ' + this.getDate();
        		const hostHeader = 'host: ' + params['api_host'];
        		const requestTarget = '(request-target): ' + httpMethod + ' ' + apiPath + apiParams;
        		var signingString = requestTarget + '\n' + dateHeader + '\n' + hostHeader;
        		var reqHeaders = [contentTypeHeader, dateHeader];

        		if (httpMethod === 'post') {
        			var body = JSON.stringify({
        				'namespace': namespace,
        				'query': mql
        			});
        			headers = headers + ' x-content-sha256 content-type content-length';
        			const bodyHeader = 'x-content-sha256: ' + this.encode(this.hash(body));
        			const bodyLengthHeader = 'content-length: ' + body.length;
        			signingString = signingString + '\n' + bodyHeader + '\n' + contentTypeHeader + '\n' + bodyLengthHeader;
        			reqHeaders.push(bodyHeader, bodyLengthHeader);
        		}

        		const signature = this.encode(this.sign(signingString));

        		reqHeaders.push('Authorization: Signature version="1",keyId="' + params['tenancy_ocid'] + '/' + params['user_ocid'] + '/' + params['fingerprint'] + '",algorithm="rsa-sha256",headers="' + headers + '",signature="' + signature + '"');
        		for (var header = 0, headerLength = reqHeaders.length; header < headerLength; header++) {
        			this.request.addHeader(reqHeaders[header]);
        		}

        		if (params['http_proxy']) {
        			this.request.setProxy(params['http_proxy']);
        			Zabbix.log(4, this.zabbixLogPrefix + ' Using http proxy: ' + params['http_proxy']);
        		}

        		if (httpMethod === 'post') {
        			var apiRateLimitExceeded = false;
        			do {
        				const response = this.request.post('https://' + params['api_host'] + apiPath + apiParams, body);

        				try {
        					if (JSON.parse(response)['code'] === 'TooManyRequests') {

        						apiRateLimitExceeded = true;
        						Zabbix.sleep(1000);
        					} else {
        						apiRateLimitExceeded = false;
        					}
        				} catch (error) {
        					Zabbix.log(3, this.zabbixLogPrefix + ' Could not parse the response: ' + JSON.stringify(response));
        					throw 'Could not parse the response. See logs for more information.';
        				}
        			} while (apiRateLimitExceeded);
        		} else {
        			const response = this.request.get('https://' + params['api_host'] + apiPath + apiParams);
        		}

        		this.request.clearHeader();

        		if (this.request.getStatus() === parseInt(params['http_status_code'])) {
        			return response;
        		} else {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Unexpected HTTP response code: ' + this.request.getStatus());
        			throw 'Unexpected HTTP response code: ' + this.request.getStatus();
        		}
        	};

        	this.extractData = function (httpMethod, data, keys, compartment) {
        		try {
        			data = JSON.parse(data);
        		} catch (error) {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Could not parse the received JSON object: ' + data);
        			throw 'Could not parse received JSON object. See logs for more information.';
        		}

        		if (typeof keys == 'object') {
        			var returnBuffer = [];
        			for (var dataObj = 0, dataLength = data.length; dataObj < dataLength; dataObj++) {

        				var objectBuffer = {};
        				for (var key = 0, keysLength = keys.length; key < keysLength; key++) {
        					if (data[dataObj][keys[key]] || data[dataObj][keys[key]] == null) {
        						objectBuffer[keys[key].match(/^[a-z]+$|[A-Z][a-z]+$/)[0].toLowerCase()] = data[dataObj][keys[key]];
        					} else {
        						Zabbix.log(3, this.zabbixLogPrefix + ' Received an unexpected JSON object. Could not get value for key "' + keys[key] + '" in JSON: ' + JSON.stringify(data[dataObj]));
        						throw 'Received an unexpected JSON object. See logs for more information.';
        					}
        				}
        				if (typeof compartment != 'undefined' && compartment != '') objectBuffer['compartment'] = compartment;
        				returnBuffer.push(objectBuffer);
        			}
        			return returnBuffer;
        		}

        		try {
        			if (httpMethod === 'get') {
        				return data[keys];
        			} else {
        				if (data.length === 0) {
        					return 0;
        				}
        				data = data[0][keys];
        				return data[data.length - 1]['value'];
        			}
        		} catch (error) {
        			Zabbix.log(3, this.zabbixLogPrefix + ' Could not find key "' + keys + '" in JSON: ' + JSON.stringify(data));
        			throw 'Could not find required key in JSON object. See logs for more information.';
        		}
        	};
        }


        const params = JSON.parse(value);
        validateZabbixParams(['tenancy_ocid', 'user_ocid', 'private_key', 'fingerprint', 'api_host', 'db_id', 'http_status_code'], params);
        var oci = new OCI('Autonomous DB', 'Get state', params);

        return oci.extractData('get', oci.executeRequest('get', '/20160918/autonomousDatabases/' + encodeURIComponent(params['db_id']), ''), 'lifecycleState');
      description: Gets the autonomous database state.
      valuemap:
        name: Autonomous database state
      preprocessing:
      - type: JAVASCRIPT
        parameters:
        - |
          const idx = {
          	'PROVISIONING': 1,
          	'AVAILABLE': 2,
          	'STOPPING': 3,
          	'STOPPED': 4,
          	'STARTING': 5,
          	'TERMINATING': 6,
          	'TERMINATED': 7,
          	'RESTORE_IN_PROGRESS': 8,
          	'RESTORE_FAILED': 9,
          	'BACKUP_IN_PROGRESS': 10,
          	'SCALE_IN_PROGRESS': 11,
          	'AVAILABLE_NEEDS_ATTENTION': 12,
          	'UPDATING': 13,
          	'MAINTENANCE_IN_PROGRESS': 14,
          	'RESTARTING': 15,
          	'RECREATING': 16,
          	'ROLE_CHANGE_IN_PROGRESS': 17,
          	'UPGRADING': 18,
          	'UNAVAILABLE': 19,
          	'INACCESSIBLE': 20,
          	'STANDBY': 21
          };

          return typeof idx[value] === 'undefined' ? 0 : idx[value];
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      timeout: 10s
      parameters:
      - name: api_host
        value: '{$OCI.API.AUTONOMOUS.DB.HOST}'
      - name: db_id
        value: '{$OCI.AUTONOMOUS.DB.ID}'
      - name: fingerprint
        value: '{$OCI.API.FINGERPRINT}'
      - name: http_proxy
        value: '{$OCI.HTTP.PROXY}'
      - name: http_status_code
        value: '{$OCI.HTTP.RETURN.CODE.OK}'
      - name: private_key
        value: '{$OCI.API.PRIVATE.KEY}'
      - name: tenancy_ocid
        value: '{$OCI.API.TENANCY}'
      - name: user_ocid
        value: '{$OCI.API.USER}'
      tags:
      - tag: component
        value: environment
      triggers:
      - uuid: bb790262359f4e35af895b1a69ad511c
        expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
          = 12
        name: 'OCI Autonomous DB: Available, needs attention'
        priority: WARNING
        description: Autonomous database is available, but needs attention.
        tags:
        - tag: scope
          value: availability
      - uuid: 18594a88549843c498d0e037f51afc59
        expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
          = 19 or last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
          = 20
        name: 'OCI Autonomous DB: Database is not available or accessible'
        priority: HIGH
        description: Autonomous database is not available or accessible.
        tags:
        - tag: scope
          value: availability
      - uuid: 4ee1a96f29ef461c8830667e19637911
        expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
          = 9
        name: 'OCI Autonomous DB: Restore has failed'
        priority: WARNING
        description: Autonomous database restore has failed.
        tags:
        - tag: scope
          value: notice
      - uuid: 783550ed705944259190fb10dae3f5a8
        expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state,#1)<>last(/Oracle
          Cloud Autonomous Database by HTTP/oci.aut.db.state,#2)
        name: 'OCI Autonomous DB: State has changed'
        event_name: 'OCI Autonomous DB: State has changed (new state: {ITEM.VALUE})'
        opdata: 'Current state: {ITEM.LASTVALUE}'
        priority: INFO
        description: Autonomous database state has changed.
        manual_close: YES
        dependencies:
        - name: 'OCI Autonomous DB: Available, needs attention'
          expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
            = 12
        - name: 'OCI Autonomous DB: Database is not available or accessible'
          expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
            = 19 or last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
            = 20
        - name: 'OCI Autonomous DB: Restore has failed'
          expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
            = 9
        - name: 'OCI Autonomous DB: State unknown'
          expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
            = 0
        tags:
        - tag: scope
          value: notice
      - uuid: 2bc79a5a19a544d39c6de861b94564af
        expression: last(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.state)
          = 0
        name: 'OCI Autonomous DB: State unknown'
        priority: WARNING
        description: Autonomous database state is unknown.
        tags:
        - tag: scope
          value: availability
    - uuid: 6111b1843fe94fefbf1ca1d530832d39
      name: Running statements
      type: DEPENDENT
      key: oci.aut.db.statements.running
      value_type: FLOAT
      description: The number of running SQL statements aggregated across all consumer
        groups during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.RunningStatements
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 7901279fcb2a4f6285874680ed5f55f5
      name: Storage space allocated
      type: DEPENDENT
      key: oci.aut.db.storage.space.alloc
      value_type: FLOAT
      units: B
      description: Amount of space allocated to the database for all tablespaces during
        the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.StorageAllocated
      - type: MULTIPLIER
        parameters:
        - '1073741824'
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 12h
      master_item:
        key: oci.aut.db.metrics.storage.stats
      tags:
      - tag: component
        value: storage
    - uuid: 9dd27df012b24019ad2562822b471a25
      name: Maximum storage space
      type: DEPENDENT
      key: oci.aut.db.storage.space.max
      value_type: FLOAT
      units: B
      description: Maximum amount of storage reserved for the database during the
        selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.StorageMax
      - type: MULTIPLIER
        parameters:
        - '1073741824'
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 12h
      master_item:
        key: oci.aut.db.metrics.storage.stats
      tags:
      - tag: component
        value: storage
    - uuid: e5378b6a3d33462eb4f3ed6228532d10
      name: Storage space used
      type: DEPENDENT
      key: oci.aut.db.storage.space.used
      value_type: FLOAT
      units: B
      description: Maximum amount of space used during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.StorageUsed
      - type: MULTIPLIER
        parameters:
        - '1073741824'
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 12h
      master_item:
        key: oci.aut.db.metrics.storage.stats
      tags:
      - tag: component
        value: storage
    - uuid: 5cad114ed74341199a4d3ef17c9acd8e
      name: Storage utilization, in %
      type: DEPENDENT
      key: oci.aut.db.storage.space.util
      value_type: FLOAT
      units: '%'
      description: The percentage of the reserved maximum storage currently allocated
        for all database tablespaces. Represents the total reserved space for all
        tablespaces.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.StorageUtilization
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 12h
      master_item:
        key: oci.aut.db.metrics.storage.stats
      tags:
      - tag: component
        value: storage
      triggers:
      - uuid: 37bb41d830424ba2871e768957225add
        expression: min(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.storage.space.util,5m)
          >= {$OCI.AUTONOMOUS.DB.STORAGE.UTIL.WARN}
        name: 'OCI Autonomous DB: Current storage utilization is high'
        event_name: 'OCI Autonomous DB: Current storage utilization is high (util
          >= {$OCI.AUTONOMOUS.DB.STORAGE.UTIL.WARN}%)'
        opdata: 'Current: {ITEM.LASTVALUE1}'
        priority: WARNING
        description: Current storage utilization has exceeded `{$OCI.AUTONOMOUS.DB.STORAGE.UTIL.WARN}`%
          of the max available value.
        dependencies:
        - name: 'OCI Autonomous DB: Current storage utilization is too high'
          expression: min(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.storage.space.util,5m)
            >= {$OCI.AUTONOMOUS.DB.STORAGE.UTIL.HIGH}
        tags:
        - tag: scope
          value: capacity
      - uuid: 8e16451106094713abaa624967026dc3
        expression: min(/Oracle Cloud Autonomous Database by HTTP/oci.aut.db.storage.space.util,5m)
          >= {$OCI.AUTONOMOUS.DB.STORAGE.UTIL.HIGH}
        name: 'OCI Autonomous DB: Current storage utilization is too high'
        event_name: 'OCI Autonomous DB: Current storage utilization is too high (util
          >= {$OCI.AUTONOMOUS.DB.STORAGE.UTIL.HIGH}%)'
        opdata: 'Current: {ITEM.LASTVALUE1}'
        priority: HIGH
        description: Current storage utilization has exceeded `{$OCI.AUTONOMOUS.DB.STORAGE.UTIL.HIGH}`%
          of the max available value.
        tags:
        - tag: scope
          value: capacity
    - uuid: 3455978b6e2a4291984bf1e7c95551e1
      name: DB time
      type: DEPENDENT
      key: oci.aut.db.time
      value_type: FLOAT
      description: |
        The amount of time database user sessions spend executing database code (CPU time + wait time). Database time is used to infer database call latency as it increases in direct proportion to both database call latency (response time) and call volume.
        It is calculated as the average rate of accumulation of database time by foreground sessions in the database over the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.DBTime
      - type: JAVASCRIPT
        parameters:
        - return Math.round(value * 100) / 100;
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 35995e92de8e45b0a8493bc285ccd0c8
      name: Transaction count
      type: DEPENDENT
      key: oci.aut.db.transaction.count
      description: The combined number of user commits and user rollbacks during the
        selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.TransactionCount
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 3e1cd8b4c829451499d605512e1a1bf0
      name: User calls
      type: DEPENDENT
      key: oci.aut.db.user.calls
      description: The combined number of logons, parses, and execute calls during
        the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.UserCalls
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 0cda6a956ca1476da28083cfc6de8bcc
      name: User commits
      type: DEPENDENT
      key: oci.aut.db.user.commits
      description: The number of user commits during the selected time interval. When
        a user commits a transaction, the generated redo that reflects the changes
        made to database blocks must be written to disk. Commits often represent the
        closest thing to a user transaction rate.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.UserCommits
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 99292418f1764484b1cda27b70af84cc
      name: User rollbacks
      type: DEPENDENT
      key: oci.aut.db.user.rollbacks
      description: Number of times users manually issue the `ROLLBACK` statement or
        an error occurs during a user's transactions during the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.UserRollbacks
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    - uuid: 8f627c48a0a94e41ad1b66d7a4817898
      name: Wait time
      type: DEPENDENT
      key: oci.aut.db.wait.time
      value_type: FLOAT
      description: Average rate of accumulation of non-idle wait time by foreground
        sessions in the database over the selected time interval.
      preprocessing:
      - type: JSONPATH
        parameters:
        - $.WaitTime
      - type: JAVASCRIPT
        parameters:
        - return Math.round(value * 100) / 100;
      - type: DISCARD_UNCHANGED_HEARTBEAT
        parameters:
        - 1h
      master_item:
        key: oci.aut.db.metrics.frequent.get
      tags:
      - tag: component
        value: environment
    tags:
    - tag: class
      value: cloud
    - tag: target
      value: oci
    - tag: target
      value: oracle-cloud-infrastructure
    macros:
    - macro: '{$OCI.AUTONOMOUS.DB.CPU.UTIL.HIGH}'
      value: '90'
      description: Sets the percentage threshold for creating a "high" severity event
        about CPU resource utilization.
    - macro: '{$OCI.AUTONOMOUS.DB.CPU.UTIL.WARN}'
      value: '75'
      description: Sets the percentage threshold for creating a "warning" severity
        event about CPU resource utilization.
    - macro: '{$OCI.AUTONOMOUS.DB.STORAGE.UTIL.HIGH}'
      value: '90'
      description: Sets the percentage threshold for creating a "high" severity event
        about storage resource utilization.
    - macro: '{$OCI.AUTONOMOUS.DB.STORAGE.UTIL.WARN}'
      value: '75'
      description: Sets the percentage threshold for creating a "warning" severity
        event about storage resource utilization.
    - macro: '{$OCI.HTTP.PROXY}'
      description: Set an HTTP proxy for OCI API requests if needed.
    - macro: '{$OCI.HTTP.RETURN.CODE.OK}'
      value: '200'
      description: Set the HTTP return code that represents an OK response from the
        API. The default is "200",  but can vary, for example, if a proxy is used.
    valuemaps:
    - uuid: e336c0d4e22f4f9f9c42d6de65fed068
      name: Autonomous database state
      mappings:
      - value: '0'
        newvalue: Unknown
      - value: '1'
        newvalue: Provisioning
      - value: '2'
        newvalue: Available
      - value: '3'
        newvalue: Stopping
      - value: '4'
        newvalue: Stopped
      - value: '5'
        newvalue: Starting
      - value: '6'
        newvalue: Terminating
      - value: '7'
        newvalue: Terminated
      - value: '8'
        newvalue: Restore in progress
      - value: '9'
        newvalue: Restore failed
      - value: '10'
        newvalue: Backup in progress
      - value: '11'
        newvalue: Scale in progress
      - value: '12'
        newvalue: Available needs attention
      - value: '13'
        newvalue: Updating
      - value: '14'
        newvalue: Maintenance in progress
      - value: '15'
        newvalue: Restarting
      - value: '16'
        newvalue: Recreating
      - value: '17'
        newvalue: Role change in progress
      - value: '18'
        newvalue: Upgrading
      - value: '19'
        newvalue: Unavailable
      - value: '20'
        newvalue: Inaccessible
      - value: '21'
        newvalue: Standby
    - uuid: 3b30e8a71ef342e78f9f29243aafd992
      name: Database availability
      mappings:
      - value: '0'
        newvalue: Unavailable
      - value: '1'
        newvalue: Available
